
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CommentsScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  imageId: 'imageId',
  createdAt: 'createdAt'
};

exports.Prisma.ImagesScalarFieldEnum = {
  id: 'id',
  imageName: 'imageName',
  imagePath: 'imagePath',
  description: 'description',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.Saved_imagesScalarFieldEnum = {
  userId: 'userId',
  imageId: 'imageId',
  createdAt: 'createdAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  age: 'age',
  avatar: 'avatar',
  googleId: 'googleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.commentsOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.imagesOrderByRelevanceFieldEnum = {
  imageName: 'imageName',
  imagePath: 'imagePath',
  description: 'description'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  avatar: 'avatar',
  googleId: 'googleId'
};


exports.Prisma.ModelName = {
  comments: 'comments',
  images: 'images',
  saved_images: 'saved_images',
  users: 'users'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\Hard\\Cyber\\sbs_nodejs\\capstone\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\Hard\\Cyber\\sbs_nodejs\\capstone\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel comments {\n  id        Int       @id @default(autoincrement())\n  content   String    @db.Text\n  userId    Int\n  imageId   Int\n  createdAt DateTime? @default(now()) @db.Timestamp(0)\n  users     users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: \"comments_ibfk_1\")\n  images    images    @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: \"comments_ibfk_2\")\n\n  @@index([imageId], map: \"imageId\")\n  @@index([userId], map: \"userId\")\n}\n\nmodel images {\n  id           Int            @id @default(autoincrement())\n  imageName    String         @db.VarChar(255)\n  imagePath    String         @db.VarChar(500)\n  description  String?        @db.Text\n  userId       Int\n  createdAt    DateTime?      @default(now()) @db.Timestamp(0)\n  comments     comments[]\n  users        users          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: \"images_ibfk_1\")\n  saved_images saved_images[]\n\n  @@index([userId], map: \"userId\")\n}\n\nmodel saved_images {\n  userId    Int\n  imageId   Int\n  createdAt DateTime? @default(now()) @db.Timestamp(0)\n  users     users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: \"saved_images_ibfk_1\")\n  images    images    @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: \"saved_images_ibfk_2\")\n\n  @@id([userId, imageId])\n  @@index([imageId], map: \"imageId\")\n}\n\nmodel users {\n  id           Int            @id @default(autoincrement())\n  email        String         @unique(map: \"email\") @db.VarChar(255)\n  password     String?        @db.VarChar(255)\n  fullName     String         @db.VarChar(100)\n  age          Int?\n  avatar       String?        @db.VarChar(500)\n  googleId     String?        @unique(map: \"googleId\") @db.VarChar(255)\n  createdAt    DateTime?      @default(now()) @db.Timestamp(0)\n  updatedAt    DateTime?      @default(now()) @db.Timestamp(0)\n  comments     comments[]\n  images       images[]\n  saved_images saved_images[]\n}\n",
  "inlineSchemaHash": "dd62029b9d76d357f71e7e7a403c53209d9097854c26a93e95b68618e9c1466c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"comments\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"imageId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"users\",\"relationName\":\"commentsTousers\"},{\"name\":\"images\",\"kind\":\"object\",\"type\":\"images\",\"relationName\":\"commentsToimages\"}],\"dbName\":null},\"images\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"imageName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imagePath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"comments\",\"relationName\":\"commentsToimages\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"users\",\"relationName\":\"imagesTousers\"},{\"name\":\"saved_images\",\"kind\":\"object\",\"type\":\"saved_images\",\"relationName\":\"imagesTosaved_images\"}],\"dbName\":null},\"saved_images\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"imageId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"users\",\"relationName\":\"saved_imagesTousers\"},{\"name\":\"images\",\"kind\":\"object\",\"type\":\"images\",\"relationName\":\"imagesTosaved_images\"}],\"dbName\":null},\"users\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"age\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"comments\",\"relationName\":\"commentsTousers\"},{\"name\":\"images\",\"kind\":\"object\",\"type\":\"images\",\"relationName\":\"imagesTousers\"},{\"name\":\"saved_images\",\"kind\":\"object\",\"type\":\"saved_images\",\"relationName\":\"saved_imagesTousers\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

